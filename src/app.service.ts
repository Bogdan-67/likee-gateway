import { Injectable } from '@nestjs/common';
import * as puppeteer from 'puppeteer';
import { KnownDevices } from 'puppeteer';
const iPhone = KnownDevices['iPhone 15'];

@Injectable()
export class AppService {
  async getVideoInfo(uri: string): Promise<any> {
    uri = 'https://l.likee.video/p/H7rCwn';
    const browser = await puppeteer.launch({
      headless: false, // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å headless: true –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--window-size=375,812', // –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ iPhone X
      ],
    });

    const page = await browser.newPage();

    await page.setRequestInterception(true); // –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤

    page.on('request', async (request) => {
      const url = request.url();
      if (url.includes('api.like-video.com') && request.method() === 'POST') {
        console.log(`üéØ –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω API-–∑–∞–ø—Ä–æ—Å: ${url}`);
        console.log(`üìå –î–∞–Ω–Ω—ã–µ:`, request.postData());
      }
      request.continue();
    });

    // –≠–º—É–ª–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    await page.emulate(iPhone);

    try {
      await page.goto(uri, { waitUntil: 'domcontentloaded', timeout: 60000 });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    }
    function wait(time) {
      return new Promise(resolve => {
        setTimeout(resolve, time);
      });
    }
    await wait(500000);
    // –î–æ—Å—Ç–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    const jsonData = await page.evaluate(() => {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ <script>
      const scripts = Array.from(document.querySelectorAll('script'));

      // –ò—â–µ–º —Å—Ä–µ–¥–∏ –Ω–∏—Ö —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç "window.data"
      const scriptTag = scripts.find((script) =>
        script.textContent?.includes('window.data'),
      );

      if (!scriptTag) return null; // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null

      // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
      const match = scriptTag.textContent?.match(
        /window\.data\s*=\s*(\{.*\});/,
      );

      return match ? match[1] : null;
    });

    await browser.close();

    let parsedData;

    if (jsonData) {
      parsedData = JSON.parse(jsonData);
      console.log('msg_text:', parsedData.msg_text);
    } else {
      console.log('JSON —Å window.data –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return parsedData;
  }
}
